/Users/pascaltimshel/p_HiC/Ferhat_Ay_2014/fastEpi_compiled/hIMR90_width_500_maf_5_q_1e-08_epi1_1e-8__150122_113919___stat_file.txt/hIMR90_width_500_maf_5_q_1e-08_epi1_1e-8__150122_113919___results.epi.qt.lm.combined.txt"
# --> nrow=49827
### READ table
df.fastEpi <- read.delim(file.fastEpi_table, stringsAsFactors=F)#
str(df.fastEpi)
nrow(df.fastEpi)
### UNIQUE SNPs and probes
SNP_A.unique <- unique(df.fastEpi$SNP_A); length(SNP_A.unique) # --> 6512
SNP_B.unique <- unique(df.fastEpi$SNP_B); length(SNP_B.unique) # --> 6501
SNP_AB.intersect <- intersect(SNP_A.unique, SNP_B.unique); length(SNP_AB.intersect) # --> 54
SNP_AB.union <- union(SNP_A.unique, SNP_B.unique); length(SNP_AB.union) # --> 12959
probes.unique <- unique(df.fastEpi$PHENOTYPE); length(probes.unique) # --> 1127
# extract UNION snps
#cat(SNP_AB.union, sep="\n", file=paste0(dirname(file.fastEpi_table),"/SNP_AB.union.txt"))
### Count number of pairs below a certain p-value threshold
n.passing <- sum(df.fastEpi$PVALUE<1e-11)
n.passing/nrow(df.fastEpi)*100 # Percentage
### Checking for duplicates ###
# --> *We need a sorted rsID to do this*
anyDuplicated(df.fastEpi[,c("SNP_A", "SNP_B", "PHENOTYPE")]) # --> 0 duplicated. This is the "unsorted" data frame, so we cannot be sure.
x.rsID <- cbind(df.fastEpi$SNP_A, df.fastEpi$SNP_B) #x.rsID <- matrix(c(df.fastEpi$SNP_A, df.fastEpi$SNP_B), ncol=2) # gives the same as cbind()
head(x.rsID)
x.rsID.order <- t(apply(x.rsID, 1, order))
head(x.rsID.order)
### Copy data frame
df.fastEpi.sorted_rsID <- df.fastEpi # this data frame MUST have the same ROW order (keep them in sync)
### Creating extraction indices
# NOTE: the length of a matrix is the NUMBER OF ELEMENTS
idxA <- cbind(1:nrow(x.rsID.order), x.rsID.order[,1]) # first column of x.rsID.order
idxB <- cbind(1:nrow(x.rsID.order), x.rsID.order[,2]) # second column of x.rsID.order
### "Swapping" rsIDs: *OBS*: we are using df.fastEpi because after modifying "SNP_A" in df.fastEpi.sorted_rsID the indexing is no longer valid.
# it is important that the columns are extracted in the CORRECT ORDER c("SNP_A", "SNP_B")
df.fastEpi.sorted_rsID$SNP_A <- df.fastEpi[, c("SNP_A", "SNP_B")][idxA]
df.fastEpi.sorted_rsID$SNP_B <- df.fastEpi[, c("SNP_A", "SNP_B")][idxB]
### "Swapping" CHR: we are using df.fastEpi because after modifying "SNP_A" in df.fastEpi.sorted_rsID the indexing is no longer valid.
# it is important that the columns are extracted in the CORRECT ORDER c("CHR", "CHR.1")
df.fastEpi.sorted_rsID$CHR <- df.fastEpi[, c("CHR", "CHR.1")][idxA]
df.fastEpi.sorted_rsID$CHR.1 <- df.fastEpi[, c("CHR", "CHR.1")][idxB]
### Inspecting results
head(df.fastEpi.sorted_rsID)
head(df.fastEpi)
### Checking for duplicates again ###
# *OBS*: here we are only checking for DUPLICATED SNP-probe pairs. That is, the p-values does NOT have to be the same.
any(duplicated(df.fastEpi.sorted_rsID[,c("SNP_A", "SNP_B", "PHENOTYPE")])) # anyDuplicated() --> 14524
sum(duplicated(df.fastEpi.sorted_rsID[,c("SNP_A", "SNP_B", "PHENOTYPE")])) # --> 30
sum(duplicated(df.fastEpi.sorted_rsID)) #  all duplicated
idx.duplicated <- duplicated(df.fastEpi.sorted_rsID[,c("SNP_A", "SNP_B", "PHENOTYPE")]) | duplicated(df.fastEpi.sorted_rsID[,c("SNP_A", "SNP_B", "PHENOTYPE")], fromLast=T)
df.fastEpi.sorted_rsID.dup <- df.fastEpi.sorted_rsID[idx.duplicated, ]
df.fastEpi.sorted_rsID.dup <- df.fastEpi.sorted_rsID.dup[with(df.fastEpi.sorted_rsID.dup, order(SNP_A, SNP_B)),]
### write csv
file.duplicated <- paste0(dirname(file.fastEpi_table), "/", "duplicated_SNP-probe_pairs.csv")
file.duplicated
#write.csv(df.fastEpi.sorted_rsID.dup, file=file.duplicated)
### **** ###
df.fastEpi.sorted_rsID.unique <- unique(df.fastEpi.sorted_rsID)
df.fastEpi.sorted_rsID.unique
##############################################################################
##############################################################################
### Sort by p-value ###
df.fastEpi.sorted <- df.fastEpi[order(df.fastEpi$PVALUE), ]
head(df.fastEpi.sorted)
### Write to csv
file.fastEpi_table.p_value.sorted <- paste0(dirname(file.fastEpi_table), "/", "fastEpi_table.p_value.sorted.csv")
file.fastEpi_table.p_value.sorted
n.top <- 10000
write.csv(df.fastEpi.sorted, file=file.fastEpi_table.p_value.sorted)
write.csv(df.fastEpi.sorted[1:n.top,], file=paste0(dirname(file.fastEpi_table), "/", "fastEpi_table.p_value.sorted.top1000.csv"), row.names=F)
##################### Current TABLES #####################
file.fastEpi_table <- "/Users/pascaltimshel/p_HiC/Ferhat_Ay_2014/fastEpi_compiled//Users/pascaltimshel/p_HiC/Ferhat_Ay_2014/fastEpi_compiled/hIMR90_width_500_maf_5_q_1e-08_epi1_1e-8__150122_113919___results.epi.qt.lm.combined.txt
############### SYNOPSIS ###################
# CLASS: script; explorative
# PURPOSE: read fastEpi compiled table
# x) number of unique probes and snps.
# x) any duplicated probe/SNP pair?
#snpStats: Replicate p-value using F-test
#snpStats: Does SNPs that are often detected as significant have a high missingness rate?
#snpStats: Are the SNPs in LD?
############################################
library(reshape2)
library(ggplot2)
library(plyr)
rm(list=ls())
wd <- "/Users/pascaltimshel/git/epistasis/interactome_fit-hic-c"
setwd(wd)
######################
################################# LOAD fastEpi table ############################
### EXAMPLE ###
#CHR  SNP_A  CHR	SNP_B	BETA	CHISQ	PVALUE	PHENOTYPE
#9	rs4579584	20	rs2426193	-0.25225	49.39828	2.08928E-12	ILMN_1799744
#9	rs4579584	20	rs7266126	-0.25303	49.61180	1.87383E-12	ILMN_1799744
#4	rs7681358	11	rs17137547	-1.49101	72.67622	1.52763E-17	ILMN_1694385
##################### Initial TABLES #####################
### COMPLETE TABLE
#file.fastEpi_table <- "/Users/pascaltimshel/p_HiC/Ferhat_Ay_2014/fastEpi_compiled/fastEpi_1e-10_0108_212539/results.epi.qt.lm.combined.stripped"
# --> nrow=833144
##################### Current TABLES #####################
file.fastEpi_table <- "/Users/pascaltimshel/p_HiC/Ferhat_Ay_2014/fastEpi_compiled/hIMR90_width_500_maf_5_q_1e-08_epi1_1e-8/hIMR90_width_500_maf_5_q_1e-08_epi1_1e-8__150122_113919___results.epi.qt.lm.combined.txt"
# --> nrow=49827
df.fastEpi <- read.delim(file.fastEpi_table, stringsAsFactors=F)#
str(df.fastEpi)
nrow(df.fastEpi)
### UNIQUE SNPs and probes
SNP_A.unique <- unique(df.fastEpi$SNP_A); length(SNP_A.unique) # --> 6512
SNP_AB.intersect <- intersect(SNP_A.unique, SNP_B.unique); length(SNP_AB.intersect) # --> 54
SNP_B.unique <- unique(df.fastEpi$SNP_B); length(SNP_B.unique) # --> 6501
SNP_AB.union <- union(SNP_A.unique, SNP_B.unique); length(SNP_AB.union) # --> 12959
probes.unique <- unique(df.fastEpi$PHENOTYPE); length(probes.unique) # --> 1127
# extract UNION snps
#cat(SNP_AB.union, sep="\n", file=paste0(dirname(file.fastEpi_table),"/SNP_AB.union.txt"))
### Count number of pairs below a certain p-value threshold
n.passing <- sum(df.fastEpi$PVALUE<1e-11)
n.passing/nrow(df.fastEpi)*100 # Percentage
# --> *We need a sorted rsID to do this*
anyDuplicated(df.fastEpi[,c("SNP_A", "SNP_B", "PHENOTYPE")]) # --> 0 duplicated. This is the "unsorted" data frame, so we cannot be sure.
### Checking for duplicates ###
x.rsID <- cbind(df.fastEpi$SNP_A, df.fastEpi$SNP_B) #x.rsID <- matrix(c(df.fastEpi$SNP_A, df.fastEpi$SNP_B), ncol=2) # gives the same as cbind()
head(x.rsID)
x.rsID.order <- t(apply(x.rsID, 1, order))
head(x.rsID.order)
### Copy data frame
df.fastEpi.sorted_rsID <- df.fastEpi # this data frame MUST have the same ROW order (keep them in sync)
### Creating extraction indices
# NOTE: the length of a matrix is the NUMBER OF ELEMENTS
idxA <- cbind(1:nrow(x.rsID.order), x.rsID.order[,1]) # first column of x.rsID.order
idxB <- cbind(1:nrow(x.rsID.order), x.rsID.order[,2]) # second column of x.rsID.order
### "Swapping" rsIDs: *OBS*: we are using df.fastEpi because after modifying "SNP_A" in df.fastEpi.sorted_rsID the indexing is no longer valid.
# it is important that the columns are extracted in the CORRECT ORDER c("SNP_A", "SNP_B")
df.fastEpi.sorted_rsID$SNP_A <- df.fastEpi[, c("SNP_A", "SNP_B")][idxA]
df.fastEpi.sorted_rsID$SNP_B <- df.fastEpi[, c("SNP_A", "SNP_B")][idxB]
### "Swapping" CHR: we are using df.fastEpi because after modifying "SNP_A" in df.fastEpi.sorted_rsID the indexing is no longer valid.
# it is important that the columns are extracted in the CORRECT ORDER c("CHR", "CHR.1")
df.fastEpi.sorted_rsID$CHR <- df.fastEpi[, c("CHR", "CHR.1")][idxA]
df.fastEpi.sorted_rsID$CHR.1 <- df.fastEpi[, c("CHR", "CHR.1")][idxB]
### Inspecting results
head(df.fastEpi.sorted_rsID)
head(df.fastEpi)
### Checking for duplicates again ###
# *OBS*: here we are only checking for DUPLICATED SNP-probe pairs. That is, the p-values does NOT have to be the same.
any(duplicated(df.fastEpi.sorted_rsID[,c("SNP_A", "SNP_B", "PHENOTYPE")])) # anyDuplicated() --> 14524
sum(duplicated(df.fastEpi.sorted_rsID[,c("SNP_A", "SNP_B", "PHENOTYPE")])) # --> 30
sum(duplicated(df.fastEpi.sorted_rsID)) #  all duplicated
idx.duplicated <- duplicated(df.fastEpi.sorted_rsID[,c("SNP_A", "SNP_B", "PHENOTYPE")]) | duplicated(df.fastEpi.sorted_rsID[,c("SNP_A", "SNP_B", "PHENOTYPE")], fromLast=T)
df.fastEpi.sorted_rsID.dup <- df.fastEpi.sorted_rsID[idx.duplicated, ]
df.fastEpi.sorted_rsID.dup <- df.fastEpi.sorted_rsID.dup[with(df.fastEpi.sorted_rsID.dup, order(SNP_A, SNP_B)),]
### write csv
file.duplicated <- paste0(dirname(file.fastEpi_table), "/", "duplicated_SNP-probe_pairs.csv")
file.duplicated
#write.csv(df.fastEpi.sorted_rsID.dup, file=file.duplicated)
### **** ###
df.fastEpi.sorted_rsID.unique <- unique(df.fastEpi.sorted_rsID)
df.fastEpi.sorted_rsID.unique
##############################################################################
##############################################################################
### Sort by p-value ###
df.fastEpi.sorted <- df.fastEpi[order(df.fastEpi$PVALUE), ]
head(df.fastEpi.sorted)
### Write to csv
file.fastEpi_table.p_value.sorted <- paste0(dirname(file.fastEpi_table), "/", "fastEpi_table.p_value.sorted.csv")
file.fastEpi_table.p_value.sorted
n.top <- 10000
write.csv(df.fastEpi.sorted, file=file.fastEpi_table.p_value.sorted)
write.csv(df.fastEpi.sorted[1:n.top,], file=paste0(dirname(file.fastEpi_table), "/", "fastEpi_table.p_value.sorted.top1000.csv"), row.names=F)
############### SYNOPSIS ###################
# *IMPORTANT*: this script originated as a MODIFIED DUPLICATE of another script.
# --> "compare_R_and_FastEpistasis_p-values_inflated_p_values.R" from the "..XXX/EGCUT_DATA/R_epistasis_tests" directory
# CLASS: script; understanding; investigation of pvalues; visualization
# Genotypes: EGCUT clean (832 individuals, ~2e6 SNPs)
# Phenotype/probe: ~10,000 top variance/mean probes (egcut.peer_residuals_log2_k50.top50_mean_top50_var_refseq.txt)
# PURPOSE: Compare R model (F-test) to FastEpistasis pvalues for *fit-hi-c* data.
# STEPS
# 1) Read Genotypes (this is needed for MAF calculation and R-anova model)
# 2) IMPORTANT: Read *TOP-XXX* FastEpistasis results, e.g. fastEpi_table.p_value.sorted.top1000.csv
# --> this file is GENERATED by "explore_fastEpi_compiled_results"
# 3) Calculate MAF
# 4) Run RunEpistasisTests
# 5) Make plots
# 6) OPTIONAL: export merged results
############################################
library(ggplot2)
library(reshape2)
library(snpStats)
############
rm(list=ls())
wd <- "~/git/epistasis/interactome_fit-hic-c/explore_epi_model"
setwd(wd)
############
# save(df.probes, file="RData_tmp/tmp_EGCUT_9269_probes.RData")
load(file="/Users/pascaltimshel/Dropbox/5_Data/EGCUT_DATA/R_epistasis_tests/RData_tmp/tmp_EGCUT_9269_probes.RData") # df.probes
######################################## Read Genotypes ###########################################
#### Small test set
bed.file <- "/Users/pascaltimshel/Dropbox/5_Data/EGCUT_DATA/geno/SNPs12959/Prote_370k_251011.no_mixup.with_ETypes.chr_infered.fit-hi-c.SNPs12959"
#### Read data:
sample <- read.plink(bed.file)
# Converting SnpMatrix to Numeric Matrix
geno <- as(sample$genotypes, "numeric") # 0,1,2. Missing data will be NA.
######################################## File checks ###########################################
df.check.sync.probe_geno <- data.frame(rownames(df.probes), rownames(geno))
all(df.check.sync.probe_geno[,1]==df.check.sync.probe_geno[,2]) # --> TRUE: in sync
######################################## Read FastEpistasis results ###########################################
# HEADER: CHR  SNP_A	CHR.1	SNP_B	BETA	CHISQ	PVALUE	PHENOTYPE
cols.fastEpi <- c("chr1", "snp1", "chr2", "snp2", "BETA", "CHISQ", "PVALUE", "probename")
#file.fastEpi <- "/Users/pascaltimshel/p_HiC/Ferhat_Ay_2014/fastEpi_compiled/fastEpi_1e-10_0108_212539/fastEpi_table.p_value.sorted.top1000.csv"
file.fastEpi <- "/Users/pascaltimshel/p_HiC/Ferhat_Ay_2014/fastEpi_compiled/hIMR90_width_500_maf_5_q_1e-08_epi1_1e-8/fastEpi_table.p_value.sorted.top1000.csv"
df.fastEpistasis.results <- read.csv(file=file.fastEpi, col.names=cols.fastEpi, stringsAsFactors=F)
str(df.fastEpistasis.results)
### Create ID column: probe.snp1.snp2
df.fastEpistasis.results$ID <- apply(df.fastEpistasis.results[,c("probename", "snp1", "snp2")], 1, function(df.row) {paste(df.row[1], paste(sort(c(as.character(df.row[2]), as.character(df.row[3]))),collapse="."),sep=".")})
str(df.fastEpistasis.results)
######################################## Calculate MAF ###########################################
### snpStats - MAF for all SNPs in the loaded genotype file
snpsum <- col.summary(sample$genotypes)
df.snpsum.maf <- data.frame(snp=rownames(snpsum), MAF=snpsum$MAF)
head(df.snpsum.maf)
### Adding column to data frame: MAF
df.fastEpistasis.results$snp1.maf <- df.snpsum.maf$MAF[match(df.fastEpistasis.results$snp1, df.snpsum.maf$snp)]
df.fastEpistasis.results$snp2.maf <- df.snpsum.maf$MAF[match(df.fastEpistasis.results$snp2, df.snpsum.maf$snp)]
### Alternative approach: LOOP OVER VECTOR (sapply()) - MUCH SLOWER!
#snp1.maf <- sapply(df.fastEpistasis.results$snp1, function(rsID) {df.snpsum.maf$MAF[match(rsID, df.snpsum.maf$snp)]})
str(df.fastEpistasis.results)
bed.file <- "/Users/pascaltimshel/Dropbox/5_Data/EGCUT_DATA/geno/all_clean/Prote_370k_251011.no_mixup.with_ETypes.chr_infered.clean"
#### Read data:
bed.file <- "/Users/pascaltimshel/Dropbox/5_Data/EGCUT_DATA/geno/all_clean/Prote_370k_251011.no_mixup.with_ETypes.chr_infered.clean"
#### Read data:
sample <- read.plink(bed.file)
geno <- as(sample$genotypes, "numeric") # 0,1,2. Missing data will be NA.
dim(geno)
?system
system2("ls -l")
system2("ls", "l")
system2("ls", "-l")
system("ls -l")
source("function_write_snp_subset_plink_file.R")
source("function_write_snp_subset_plink_file.R")
df.snpstats <- write_snp_subset_plink_file(df=df.fastEpistasis.results, path.out=dirname(file.fastEpi))
df.snpstats <- data.frame()
df.snpstats$n_SNP_A.unique <- 1
source("function_write_snp_subset_plink_file.R")
df.snpstats <- write_snp_subset_plink_file(df=df.fastEpistasis.results, path.out=dirname(file.fastEpi))
source("function_write_snp_subset_plink_file.R")
df.snpstats <- write_snp_subset_plink_file(df=df.fastEpistasis.results, path.out=dirname(file.fastEpi))
source("function_write_snp_subset_plink_file.R")
df.snpstats <- write_snp_subset_plink_file(df=df.fastEpistasis.results, path.out=dirname(file.fastEpi))
df.snpstats
View(df.snpstats)
source("function_write_snp_subset_plink_file.R")
df.snpstats <- write_snp_subset_plink_file(df=df.fastEpistasis.results, path.out=dirname(file.fastEpi))
df.snpstats
View(df.fastEpistasis.results)
source("function_write_snp_subset_plink_file.R")
df.snpstats <- write_snp_subset_plink_file(df=df.fastEpistasis.results, path.out=dirname(file.fastEpi))
df.snpstats
source("function_write_snp_subset_plink_file.R")
df.snpstats <- write_snp_subset_plink_file(df=df.fastEpistasis.results, path.out=dirname(file.fastEpi))
df.snpstats
source("function_write_snp_subset_plink_file.R")
df.snpstats <- write_snp_subset_plink_file(df=df.fastEpistasis.results, path.out=dirname(file.fastEpi))
df.snpstats
bed.file <- paste0(dirname(file.fastEpi), "/egcut_snpsubset")
#### Read data:
sample <- read.plink(bed.file)
# Converting SnpMatrix to Numeric Matrix
geno <- as(sample$genotypes, "numeric") # 0,1,2. Missing data will be NA.
dim(geno)
######################################## File checks ###########################################
df.check.sync.probe_geno <- data.frame(rownames(df.probes), rownames(geno))
all(df.check.sync.probe_geno[,1]==df.check.sync.probe_geno[,2]) # --> TRUE: in sync
######################################## Calculate MAF ###########################################
### snpStats - MAF for all SNPs in the loaded genotype file
snpsum <- col.summary(sample$genotypes)
df.snpsum.maf <- data.frame(snp=rownames(snpsum), MAF=snpsum$MAF)
head(df.snpsum.maf)
### Adding column to data frame: MAF
df.fastEpistasis.results$snp1.maf <- df.snpsum.maf$MAF[match(df.fastEpistasis.results$snp1, df.snpsum.maf$snp)]
df.fastEpistasis.results$snp2.maf <- df.snpsum.maf$MAF[match(df.fastEpistasis.results$snp2, df.snpsum.maf$snp)]
### Alternative approach: LOOP OVER VECTOR (sapply()) - MUCH SLOWER!
#snp1.maf <- sapply(df.fastEpistasis.results$snp1, function(rsID) {df.snpsum.maf$MAF[match(rsID, df.snpsum.maf$snp)]})
str(df.fastEpistasis.results)
### Adding column to data frame: pairwise MAF
df.fastEpistasis.results$snp.maf.min <- with(df.fastEpistasis.results, pmin(snp1.maf, snp2.maf))
df.fastEpistasis.results.maf.gt <- subset(df.fastEpistasis.results, snp.maf.min>=0.04)
df.fastEpistasis.results.maf.gt
View(df.fastEpistasis.results.maf.gt)
View(df.fastEpistasis.results)
file.fastEpi <- "/Users/pascaltimshel/p_HiC/Ferhat_Ay_2014/fastEpi_compiled/hIMR90_width_500_maf_5_q_1e-08_epi1_1e-8/fastEpi_table.p_value.sorted.csv"
df.fastEpistasis.results <- read.csv(file=file.fastEpi, col.names=cols.fastEpi, stringsAsFactors=F)
str(df.fastEpistasis.results)
############### SYNOPSIS ###################
# CLASS: script; explorative
# PURPOSE: read fastEpi compiled table
# x) number of unique probes and snps.
# x) any duplicated probe/SNP pair?
#snpStats: Replicate p-value using F-test
#snpStats: Does SNPs that are often detected as significant have a high missingness rate?
#snpStats: Are the SNPs in LD?
############################################
library(reshape2)
library(ggplot2)
library(plyr)
rm(list=ls())
wd <- "/Users/pascaltimshel/git/epistasis/interactome_fit-hic-c"
setwd(wd)
######################
################################# LOAD fastEpi table ############################
### EXAMPLE ###
#CHR  SNP_A  CHR	SNP_B	BETA	CHISQ	PVALUE	PHENOTYPE
#9	rs4579584	20	rs2426193	-0.25225	49.39828	2.08928E-12	ILMN_1799744
#9	rs4579584	20	rs7266126	-0.25303	49.61180	1.87383E-12	ILMN_1799744
#4	rs7681358	11	rs17137547	-1.49101	72.67622	1.52763E-17	ILMN_1694385
##################### Initial TABLES #####################
### COMPLETE TABLE
#file.fastEpi_table <- "/Users/pascaltimshel/p_HiC/Ferhat_Ay_2014/fastEpi_compiled/fastEpi_1e-10_0108_212539/results.epi.qt.lm.combined.stripped"
# --> nrow=833144
##################### Current TABLES #####################
file.fastEpi_table <- "/Users/pascaltimshel/p_HiC/Ferhat_Ay_2014/fastEpi_compiled/hIMR90_width_500_maf_5_q_1e-08_epi1_1e-8/hIMR90_width_500_maf_5_q_1e-08_epi1_1e-8__150122_113919___results.epi.qt.lm.combined.txt"
# --> nrow=49827
### READ table
df.fastEpi <- read.delim(file.fastEpi_table, stringsAsFactors=F)#
str(df.fastEpi)
nrow(df.fastEpi)
### UNIQUE SNPs and probes
SNP_A.unique <- unique(df.fastEpi$SNP_A); length(SNP_A.unique) # --> 6512
SNP_B.unique <- unique(df.fastEpi$SNP_B); length(SNP_B.unique) # --> 6501
SNP_AB.intersect <- intersect(SNP_A.unique, SNP_B.unique); length(SNP_AB.intersect) # --> 54
SNP_AB.union <- union(SNP_A.unique, SNP_B.unique); length(SNP_AB.union) # --> 12959
probes.unique <- unique(df.fastEpi$PHENOTYPE); length(probes.unique) # --> 1127
# extract UNION snps
#cat(SNP_AB.union, sep="\n", file=paste0(dirname(file.fastEpi_table),"/SNP_AB.union.txt"))
### Count number of pairs below a certain p-value threshold
n.passing <- sum(df.fastEpi$PVALUE<1e-11)
n.passing/nrow(df.fastEpi)*100 # Percentage
### Checking for duplicates ###
# --> *We need a sorted rsID to do this*
anyDuplicated(df.fastEpi[,c("SNP_A", "SNP_B", "PHENOTYPE")]) # --> 0 duplicated. This is the "unsorted" data frame, so we cannot be sure.
x.rsID <- cbind(df.fastEpi$SNP_A, df.fastEpi$SNP_B) #x.rsID <- matrix(c(df.fastEpi$SNP_A, df.fastEpi$SNP_B), ncol=2) # gives the same as cbind()
head(x.rsID)
x.rsID.order <- t(apply(x.rsID, 1, order))
head(x.rsID.order)
### Copy data frame
df.fastEpi.sorted_rsID <- df.fastEpi # this data frame MUST have the same ROW order (keep them in sync)
### Creating extraction indices
# NOTE: the length of a matrix is the NUMBER OF ELEMENTS
idxA <- cbind(1:nrow(x.rsID.order), x.rsID.order[,1]) # first column of x.rsID.order
idxB <- cbind(1:nrow(x.rsID.order), x.rsID.order[,2]) # second column of x.rsID.order
### "Swapping" rsIDs: *OBS*: we are using df.fastEpi because after modifying "SNP_A" in df.fastEpi.sorted_rsID the indexing is no longer valid.
# it is important that the columns are extracted in the CORRECT ORDER c("SNP_A", "SNP_B")
df.fastEpi.sorted_rsID$SNP_A <- df.fastEpi[, c("SNP_A", "SNP_B")][idxA]
df.fastEpi.sorted_rsID$SNP_B <- df.fastEpi[, c("SNP_A", "SNP_B")][idxB]
### "Swapping" CHR: we are using df.fastEpi because after modifying "SNP_A" in df.fastEpi.sorted_rsID the indexing is no longer valid.
# it is important that the columns are extracted in the CORRECT ORDER c("CHR", "CHR.1")
df.fastEpi.sorted_rsID$CHR <- df.fastEpi[, c("CHR", "CHR.1")][idxA]
df.fastEpi.sorted_rsID$CHR.1 <- df.fastEpi[, c("CHR", "CHR.1")][idxB]
### Inspecting results
head(df.fastEpi.sorted_rsID)
head(df.fastEpi)
### Checking for duplicates again ###
# *OBS*: here we are only checking for DUPLICATED SNP-probe pairs. That is, the p-values does NOT have to be the same.
any(duplicated(df.fastEpi.sorted_rsID[,c("SNP_A", "SNP_B", "PHENOTYPE")])) # anyDuplicated() --> 14524
sum(duplicated(df.fastEpi.sorted_rsID[,c("SNP_A", "SNP_B", "PHENOTYPE")])) # --> 30
sum(duplicated(df.fastEpi.sorted_rsID)) #  all duplicated
idx.duplicated <- duplicated(df.fastEpi.sorted_rsID[,c("SNP_A", "SNP_B", "PHENOTYPE")]) | duplicated(df.fastEpi.sorted_rsID[,c("SNP_A", "SNP_B", "PHENOTYPE")], fromLast=T)
df.fastEpi.sorted_rsID.dup <- df.fastEpi.sorted_rsID[idx.duplicated, ]
df.fastEpi.sorted_rsID.dup <- df.fastEpi.sorted_rsID.dup[with(df.fastEpi.sorted_rsID.dup, order(SNP_A, SNP_B)),]
### write csv
file.duplicated <- paste0(dirname(file.fastEpi_table), "/", "duplicated_SNP-probe_pairs.csv")
file.duplicated
#write.csv(df.fastEpi.sorted_rsID.dup, file=file.duplicated)
### **** ###
df.fastEpi.sorted_rsID.unique <- unique(df.fastEpi.sorted_rsID)
df.fastEpi.sorted_rsID.unique
##############################################################################
##############################################################################
### Sort by p-value ###
df.fastEpi.sorted <- df.fastEpi[order(df.fastEpi$PVALUE), ]
head(df.fastEpi.sorted)
### Write to csv
file.fastEpi_table.p_value.sorted <- paste0(dirname(file.fastEpi_table), "/", "fastEpi_table.p_value.sorted.csv")
file.fastEpi_table.p_value.sorted
n.top <- 10000
write.csv(df.fastEpi.sorted, file=file.fastEpi_table.p_value.sorted, row.names=F)
write.csv(df.fastEpi.sorted[1:n.top,], file=paste0(dirname(file.fastEpi_table), "/", "fastEpi_table.p_value.sorted.top1000.csv"), row.names=F)
############### SYNOPSIS ###################
# *IMPORTANT*: this script originated as a MODIFIED DUPLICATE of another script.
# --> "compare_R_and_FastEpistasis_p-values_inflated_p_values.R" from the "..XXX/EGCUT_DATA/R_epistasis_tests" directory
# CLASS: script; understanding; investigation of pvalues; visualization
# Genotypes: EGCUT clean (832 individuals, ~2e6 SNPs)
# Phenotype/probe: ~10,000 top variance/mean probes (egcut.peer_residuals_log2_k50.top50_mean_top50_var_refseq.txt)
# PURPOSE: Compare R model (F-test) to FastEpistasis pvalues for *fit-hi-c* data.
# STEPS
# 1) Read Genotypes (this is needed for MAF calculation and R-anova model)
# 2) IMPORTANT: Read *TOP-XXX* FastEpistasis results, e.g. fastEpi_table.p_value.sorted.top1000.csv
# --> this file is GENERATED by "explore_fastEpi_compiled_results"
# 3) Calculate MAF
# 4) Run RunEpistasisTests
# 5) Make plots
# 6) OPTIONAL: export merged results
################# ABOUT memory and snpStats #####################
### SOURCE: http://www.bioconductor.org/packages/release/bioc/vignettes/snpStats/inst/doc/data-input-vignette.pdf
# Data input vignette
# Reading genotype data in snpStats
# David Clayton
# October 13, 2014
# Before we start it is important to emphasise that the SnpMatrix objects that hold genotype
# data in snpStats are resident in memory, and limitations of the computer and of the R
# language impose limits on the maximum size of datasets that can be held at any one time.
# Each genotype reading uses only a single byte of memory so that large datasets can be
# read given the large memory capacity of modern computers. However R imposes a limit of
# 2^31 − 1 ∼ 2 × 10^9 elements in a single array. For example, this would correspond to one
# million loci for two thousand subjects and would occupy two gigabytes of machine memory.
############################################
library(ggplot2)
library(reshape2)
library(snpStats)
############
rm(list=ls())
wd <- "~/git/epistasis/interactome_fit-hic-c/explore_epi_model"
setwd(wd)
############
######################################## Read probes ###########################################
### Read file with 9269 probes and 832 individuals
#file.probes <- "/Users/pascaltimshel/Dropbox/Ubuntu/peer_analysis/export_residuals/egcut.peer_residuals_log2_k50.top50_mean_top50_var_refseq.txt"
# df.probes <- read.table(file.probes, h=T)
# rownames(df.probes) <- df.probes$IID
# df.probes <- subset(df.probes, select=-c(IID, FID))
# save(df.probes, file="RData_tmp/tmp_EGCUT_9269_probes.RData")
load(file="/Users/pascaltimshel/Dropbox/5_Data/EGCUT_DATA/R_epistasis_tests/RData_tmp/tmp_EGCUT_9269_probes.RData") # df.probes
######################################## Read FastEpistasis results ###########################################
# HEADER: CHR  SNP_A  CHR.1	SNP_B	BETA	CHISQ	PVALUE	PHENOTYPE
cols.fastEpi <- c("chr1", "snp1", "chr2", "snp2", "BETA", "CHISQ", "PVALUE", "probename")
#file.fastEpi <- "/Users/pascaltimshel/p_HiC/Ferhat_Ay_2014/fastEpi_compiled/fastEpi_1e-10_0108_212539/fastEpi_table.p_value.sorted.top1000.csv"
#file.fastEpi <- "/Users/pascaltimshel/p_HiC/Ferhat_Ay_2014/fastEpi_compiled/hIMR90_width_500_maf_5_q_1e-08_epi1_1e-8/fastEpi_table.p_value.sorted.top1000.csv"
file.fastEpi <- "/Users/pascaltimshel/p_HiC/Ferhat_Ay_2014/fastEpi_compiled/hIMR90_width_500_maf_5_q_1e-08_epi1_1e-8/fastEpi_table.p_value.sorted.csv"
df.fastEpistasis.results <- read.csv(file=file.fastEpi, col.names=cols.fastEpi, stringsAsFactors=F)
str(df.fastEpistasis.results)
df.fastEpistasis.results$ID <- apply(df.fastEpistasis.results[,c("probename", "snp1", "snp2")], 1, function(df.row) {paste(df.row[1], paste(sort(c(as.character(df.row[2]), as.character(df.row[3]))),collapse="."),sep=".")})
str(df.fastEpistasis.results)
### WRITING NEW SET OF PLINK FILES
# --> output set of plink files will be written to PATH.OUT/egcut_snpsubset.{bed,bim,fam,log}
source("function_write_snp_subset_plink_file.R")
df.snpstats <- write_snp_subset_plink_file(df=df.fastEpistasis.results, path.out=dirname(file.fastEpi))
df.snpstats
######################################## Read Genotypes ###########################################
#### Small test set
#bed.file <- "/Users/pascaltimshel/Dropbox/5_Data/EGCUT_DATA/geno/SNPs12959/Prote_370k_251011.no_mixup.with_ETypes.chr_infered.fit-hi-c.SNPs12959"
#bed.file <- "/Users/pascaltimshel/Dropbox/5_Data/EGCUT_DATA/geno/all_clean/Prote_370k_251011.no_mixup.with_ETypes.chr_infered.clean"
bed.file <- paste0(dirname(file.fastEpi), "/egcut_snpsubset")
#### Read data:
sample <- read.plink(bed.file)
# Converting SnpMatrix to Numeric Matrix
geno <- as(sample$genotypes, "numeric") # 0,1,2. Missing data will be NA.
dim(geno)
######################################## File checks ###########################################
df.check.sync.probe_geno <- data.frame(rownames(df.probes), rownames(geno))
all(df.check.sync.probe_geno[,1]==df.check.sync.probe_geno[,2]) # --> TRUE: in sync
######################################## Calculate MAF ###########################################
### snpStats - MAF for all SNPs in the loaded genotype file
snpsum <- col.summary(sample$genotypes)
df.snpsum.maf <- data.frame(snp=rownames(snpsum), MAF=snpsum$MAF)
head(df.snpsum.maf)
### Adding column to data frame: MAF
df.fastEpistasis.results$snp1.maf <- df.snpsum.maf$MAF[match(df.fastEpistasis.results$snp1, df.snpsum.maf$snp)]
df.fastEpistasis.results$snp2.maf <- df.snpsum.maf$MAF[match(df.fastEpistasis.results$snp2, df.snpsum.maf$snp)]
### Alternative approach: LOOP OVER VECTOR (sapply()) - MUCH SLOWER!
#snp1.maf <- sapply(df.fastEpistasis.results$snp1, function(rsID) {df.snpsum.maf$MAF[match(rsID, df.snpsum.maf$snp)]})
str(df.fastEpistasis.results)
### Adding column to data frame: pairwise MAF
df.fastEpistasis.results$snp.maf.min <- with(df.fastEpistasis.results, pmin(snp1.maf, snp2.maf))
View(df.fastEpistasis.results)
max(df.fastEpistasis.results$snp.maf.min)
sum(df.fastEpistasis.results$snp.maf.min > 0.2)
df.fastEpistasis.results.maf.gt <- subset(df.fastEpistasis.results, snp.maf.min>=0.2)
df.fastEpistasis.results.maf.gt
View(df.fastEpistasis.results.maf.gt)
df.probe_snp_pair <- subset(df.fastEpistasis.results.maf.gt, select=c(snp1,snp2, probename))
#df.probe_snp_pair <- subset(df.fastEpistasis.results, select=c(snp1,snp2, probename))
#df.probe_snp_pair <- subset(df.fastEpistasis.results[1:100,], select=c(snp1,snp2, probename))
str(df.probe_snp_pair)
source("function_Replication_fastEpistasis_comparison.R")
# df.probe_snp_pair: 3 columns. snp1;snp2,probename
df.res <- RunEpistasisTests(idx=1:nrow(df.probe_snp_pair),
df.probe_snp_pair=df.probe_snp_pair,
geno=geno,
expression=df.probes)
str(df.res)
df.res$ID <- apply(df.res[,c("probename", "snp1", "snp2")], 1, function(df.row) {paste(df.row[1], paste(sort(c(as.character(df.row[2]), as.character(df.row[3]))),collapse="."),sep=".")})
## OLD METHOD USING sapply (2x slower than apply)
#df.res$ID <- sapply(1:nrow(df.res), function(i) {paste(df.res$probename[i], paste(sort(c(as.character(df.res$snp1[i]), as.character(df.res$snp2[i]))),collapse="."),sep=".")})
### MERGE data frames - keep all observations in "df.res" (?)
df.res.merge <- merge(df.res, df.fastEpistasis.results, by=c("ID"), all.x=T)
#df.res.merge <- merge(df.res, df.fastEpistasis.results, by=c("snp1", "snp2"), all.x=T) #  by.x=c("snp1", "snp2"), by.y=c("SNP_A", "SNP_B")
################# Make some plots ####################
ggplot(df.res.merge, aes(x=beta, y=BETA)) + geom_point() + geom_abline() #beta_plot-6x6
ggplot(df.res.merge, aes(x=F_statistic, y=CHISQ)) + geom_point() # F-statistic_plot-6x6
ggplot(df.res.merge, aes(x=-log10(F_pval), y=-log10(PVALUE))) + geom_point() # P-value_plot-6x6
ggplot(df.res.merge, aes(x=-log10(F_pval), y=-log10(PVALUE))) + geom_point(aes(color=n_usable_data_points)) + geom_abline() # P-value_plot_with_abline_and_color-6x6
#ggsave("P-value_plot_with_abline_and_color-6x6.pdf")
### *NEW* ####
## Scatter plot; color=MAF
df.res.merge.edit <- df.res.merge
df.res.merge.edit$min_maf <- pmin(df.res.merge.edit$snp1_maf, df.res.merge.edit$snp2_maf) # pmin()
ggplot(df.res.merge.edit, aes(x=-log10(F_pval), y=-log10(PVALUE))) + geom_point(aes(color=min_maf)) + geom_abline() #
df.res.merge.export <- df.res.merge
df.res.merge.export <- subset(df.res.merge, select=-c(ID.x, probename.y, ID.y)) #OLD WAY (before fit-hi-c) probename.x
View(df.res.merge)
write.csv(df.res.merge.export, file="df.res.merge.export.csv")
source("function_plot_epistasis_model.R")
idx <- 1:10
#idx <- 1:nrow(df.snp_probe_pairs.subset)
plots <- plot_EpiModel(idx, df.probe_snp_pair, add_data_heatmap=TRUE, save_images=TRUE, save_significant_treshold=1e-5)
View(df.res.merge.export)
View(df.fastEpistasis.results.maf.gt)
View(df.fastEpistasis.results.maf.gt)
View(df.fastEpistasis.results.maf.gt)
